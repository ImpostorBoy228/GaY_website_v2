"""
Django settings for bites_videos project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-b#398ycccgd#+1t(0+h&5y5nfe3vu+v=k@moely#p@-%hj*xfi'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    'rest_framework',
    'core',
    'youtube_api',
    'analytics',
    'skins',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'bites_videos.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'bites_videos.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# File upload settings
FILE_UPLOAD_MAX_MEMORY_SIZE = 524288000  # 500MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 524288000  # 500MB
FILE_UPLOAD_PERMISSIONS = 0o644
FILE_UPLOAD_DIRECTORY_PERMISSIONS = 0o755

# Create media directories if they don't exist
MEDIA_DIRS = ['videos', 'thumbnails', 'channel_banners', 'channel_avatars']
for dir_name in MEDIA_DIRS:
    os.makedirs(os.path.join(MEDIA_ROOT, dir_name), exist_ok=True)

# Supabase Configuration
SUPABASE_URL = 'https://vqqqfxplbhvofepnhcxc.supabase.co'
SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZxcXFmeHBsYmh2b2ZlcG5oY3hjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDcwOTcxMzYsImV4cCI6MjA2MjY3MzEzNn0.YTHlGOzrWwL6Smvleh1omKoIyNKQfFyWSEqnlyNehdA'
SUPABASE_SERVICE_ROLE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZxcXFmeHBsYmh2b2ZlcG5oY3hjIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0NzA5NzEzNiwiZXhwIjoyMDYyNjczMTM2fQ.GH76YinS4c2iiCmoYtbXgA1Mbbv10hSwkB0wlw5S7JU'

# Celery Configuration
CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE

# Ensure Celery can access Django settings
CELERY_IGNORE_RESULT = False
CELERY_TRACK_STARTED = True

# Celery Beat Settings
CELERY_BEAT_SCHEDULE = {
    'cleanup-failed-downloads': {
        'task': 'youtube_api.tasks.cleanup_failed_downloads',
        'schedule': 3600.0,  # Run every hour
    },
}

# Cache settings (for download status)
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.redis.RedisCache',
        'LOCATION': 'redis://localhost:6379/1',
    }
}

# YouTube API Key
YOUTUBE_API_KEY = 'AIzaSyADeJRlk1givcfq9Yjr8WQdSSItFHH1aiI'

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '[{asctime}] {levelname} {name} - {message}',
            'style': '{',
        },
        'simple': {
            'format': '[{asctime}] {message}',
            'style': '{',
        },
        'clean': {
            # Чистый формат без метки времени, только важная информация
            'format': '{message}',
            'style': '{',
        },
        'colored': {
            # Цветной формат для консоли
            'format': '\033[1;36m[{asctime}]\033[0m \033[1;33m{levelname}\033[0m {message}',
            'style': '{',
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        # Фильтр для пропуска запросов к статическим файлам и медиа
        'skip_static_and_media': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': lambda record: not (record.args and len(record.args) >= 3 and 
                                         isinstance(record.args[0], str) and 
                                         (record.args[0].startswith('GET /static/') or 
                                          record.args[0].startswith('GET /media/'))),
        },
        # Фильтр для пропуска запросов к административным ресурсам
        'skip_admin_resources': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': lambda record: not (record.args and len(record.args) >= 3 and 
                                         isinstance(record.args[0], str) and 
                                         (record.args[0].startswith('GET /admin/jsi18n/') or
                                          record.args[0].startswith('GET /admin/analytics/'))),
        },
        # Фильтр для пропуска запросов на потоковую передачу видео
        'skip_video_streaming': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': lambda record: not (record.args and len(record.args) >= 3 and 
                                         isinstance(record.args[0], str) and 
                                         (record.args[0].startswith('GET /video/') and 'stream' in record.args[0])),
        },
        # Фильтр для пропуска записей о создании событий перемотки
        'skip_seek_logs': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': lambda record: not ('Created' in str(record.msg) and 'seek records' in str(record.msg))
        },
        # Фильтр для пропуска информации о потоковой передаче файлов
        'skip_stream_video_info': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': lambda record: not ('[STREAM_VIDEO]' in str(record.msg))
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'filters': ['skip_static_and_media', 'skip_admin_resources', 'skip_video_streaming', 
                        'skip_seek_logs', 'skip_stream_video_info'],
            'class': 'logging.StreamHandler',
            'formatter': 'colored',  # Используем цветной формат для консоли
        },
        'file': {
            'level': 'INFO',
            'filters': ['skip_static_and_media', 'skip_admin_resources', 'skip_video_streaming', 
                       'skip_seek_logs', 'skip_stream_video_info'],
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'django.log'),
            'formatter': 'verbose',
        },
        'seek_log': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'seek_events.log'),
            'formatter': 'verbose',
        },
        'analytics_log': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'analytics.log'),
            'formatter': 'simple',
        },
        'import_log': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'imports.log'),
            'formatter': 'simple',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.server': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'analytics.views': {
            'handlers': ['seek_log', 'analytics_log'],
            'level': 'INFO',
            'propagate': False,
        },
        'core.views': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'youtube_api.views': {
            'handlers': ['console', 'import_log'],
            'level': 'INFO',
            'propagate': False,
        },
        'core.services': {
            'handlers': ['console', 'import_log'],
            'level': 'INFO',
            'propagate': False,
        },
        'skins.skins_tags': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}
